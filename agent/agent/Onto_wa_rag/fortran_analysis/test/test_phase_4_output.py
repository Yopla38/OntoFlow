# test/test_phase_4_output.py
"""
Tests d'int√©gration pour valider la Phase 4 : Couche de Sortie.
Version finale et correcte, testant le syst√®me de bout en bout
sans cr√©ation manuelle de chunks dans le test.
"""

import asyncio
import os
import tempfile
import shutil
from typing import List, Dict, Any, Tuple
from unittest.mock import MagicMock, AsyncMock

from utils.document_store import DocumentStore
# --- Imports de notre nouvelle architecture ---
from ..providers.smart_orchestrator import SmartOrchestrator
from ..output.graph_visualizer import GraphVisualizer
from ..output.text_generator import TextGenerator
from ..output.report_generator import ReportGenerator
from ..core.fortran_parser import UnifiedFortranParser  # Notre parser de la Phase 2


# --- Simulation du maillon manquant : DocumentProcessor ---
# C'est la classe qui utilise notre parser pour cr√©er les chunks.
class MockDocumentProcessor:
    def __init__(self):
        # Le processeur utilise notre NOUVEAU parser unifi√©.
        self.parser = UnifiedFortranParser()

    async def process_document(self, filepath: str, document_id: str, metadata: Dict = None) -> Tuple[str, List[Dict]]:
        """
        Simule le traitement d'un document : lit, parse, et cr√©e les chunks.
        """
        with open(filepath, 'r', encoding='utf-8') as f:
            code = f.read()

        # 1. Utiliser notre parser pour obtenir les entit√©s
        parsed_result = await self.parser.parse_code_snippet(code, filepath)
        entities = parsed_result.entities

        # 2. Convertir les entit√©s en chunks (la logique que j'avais mise au mauvais endroit)
        chunks = []
        lines = code.splitlines()
        for i, entity in enumerate(entities):
            # Le start_line et end_line de l'entit√© sont des entiers, l'erreur TypeError est corrig√©e.
            entity_code = "\n".join(lines[entity.start_line - 1: entity.end_line])
            chunk_metadata = entity.to_dict()
            chunk_metadata.update({
                'filepath': filepath,
                'filename': os.path.basename(filepath),
            })
            chunks.append({
                'id': f"{document_id}-chunk-{i}",
                'text': entity_code,
                'metadata': chunk_metadata
            })
        return document_id, chunks


async def test_phase_4_output_layer():
    """Test l'int√©gration de la couche de sortie avec le reste du syst√®me."""

    print("\nüß™ Tests d'int√©gration Phase 4 - Approche de Bout en Bout")
    print("=" * 70)

    # --- Cr√©ation d'un environnement de test temporaire ---
    with tempfile.TemporaryDirectory() as temp_dir:
        # 1. Cr√©er un fichier Fortran source
        test_code = """
module module_a
    use constants
    implicit none
    contains
    subroutine sub_a()
        call sub_b("test")
    end subroutine sub_a
end module module_a

subroutine sub_b(arg)
    character(len=*), intent(in) :: arg
    implicit none
    print *, "Hello from B:", arg
end subroutine sub_b
        """
        source_filepath = os.path.join(temp_dir, "test_code.f90")
        with open(source_filepath, "w") as f:
            f.write(test_code)

        # 2. Setup des d√©pendances (DocumentStore et RAG Engine)
        mock_embedding_manager = MagicMock()
        mock_embedding_manager.storage_dir = os.path.join(temp_dir, "embeddings")
        mock_embedding_manager.load_embeddings = AsyncMock(return_value=True)
        mock_embedding_manager.create_embeddings = AsyncMock()
        mock_embedding_manager.save_embeddings = AsyncMock()

        # On instancie notre VRAI DocumentStore avec un processeur qui utilise notre NOUVELLE logique
        storage_dir = os.path.join(temp_dir, "storage")
        doc_store = DocumentStore(
            document_processor=MockDocumentProcessor(),
            embedding_manager=mock_embedding_manager,
            storage_dir=storage_dir
        )

        mock_rag_engine = MagicMock()

        # --- Ex√©cution du flux normal du syst√®me ---

        print(f"1. Ajout du fichier source '{source_filepath}' au DocumentStore...")
        # C'est cette ligne qui d√©clenche le parsing et le chunking par notre nouvelle architecture.
        document_id = await doc_store.add_document_with_id(source_filepath, "doc1")
        print(f"   ‚úÖ Document trait√© et 'chunk√©'. ID: {document_id}")

        # 2. Initialisation de l'orchestrateur
        print("\n2. Initialisation du SmartOrchestrator...")
        # L'orchestrateur lit maintenant les chunks qui ont √©t√© cr√©√©s et stock√©s.
        orchestrator = SmartOrchestrator(doc_store, mock_rag_engine)
        await orchestrator.initialize()

        assert orchestrator._initialized, "L'orchestrateur n'a pas pu s'initialiser."
        print("   ‚úÖ Orchestrateur initialis√©. Le syst√®me a charg√© et analys√© les chunks.")
        assert 'sub_a' in orchestrator.entity_manager.name_to_entity, "L'entit√© 'sub_a' n'a pas √©t√© index√©e."

        # 3. Instanciation de la couche de sortie
        visualizer = GraphVisualizer(orchestrator.analyzer, orchestrator.entity_manager)
        text_gen = TextGenerator(orchestrator)
        report_gen = ReportGenerator(orchestrator.entity_manager, orchestrator.analyzer)

        # --- Lancement des tests sur les composants de sortie ---

        print("\n3. Test TextGenerator...")
        context_text = await text_gen.get_contextual_text("sub_a", format_style="detailed")
        assert "sub_b" in context_text.lower(), "Le TextGenerator n'a pas affich√© l'appel √† sub_b."
        print("   ‚úÖ R√©sum√© textuel g√©n√©r√© avec succ√®s et contient la relation d'appel.")

        print("\n4. Test GraphVisualizer...")
        output_viz_file = os.path.join(temp_dir, "test_visualization.html")
        await visualizer.generate_visualization("module_a", output_file=output_viz_file, max_depth=2)
        assert os.path.exists(output_viz_file), "Le fichier de visualisation n'a pas √©t√© cr√©√© !"
        print(f"   ‚úÖ Fichier de visualisation cr√©√©.")

        print("\n5. Test ReportGenerator...")
        output_report_file = os.path.join(temp_dir, "test_report.html")
        await report_gen.generate_project_report(output_file=output_report_file)
        assert os.path.exists(output_report_file), "Le fichier de rapport n'a pas √©t√© cr√©√©."
        print(f"   ‚úÖ Fichier de rapport cr√©√©.")

        print("\nüéâ Tous les tests de la couche de sortie ont r√©ussi de bout en bout !")


if __name__ == "__main__":
    asyncio.run(test_phase_4_output_layer())