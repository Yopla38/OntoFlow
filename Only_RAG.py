import asyncio
import json
from pathlib import Path
from typing import Dict, Any, List

from agent.Onto_wa_rag.Integration_fortran_RAG import OntoRAG
from agent.Onto_wa_rag.CONSTANT import API_KEY_PATH, CHUNK_SIZE, CHUNK_OVERLAP, ONTOLOGY_PATH_TTL, MAX_CONCURRENT, MAX_RESULTS, \
    STORAGE_DIR, FORTRAN_AGENT_NB_STEP
from agent.Onto_wa_rag.fortran_analysis.providers.consult import FortranEntityExplorer
from agent.Onto_wa_rag.jupyter_analysis.entity_explorer_jupyter import JupyterEntityExplorer

# Imports pour le RAG
from agent.Onto_wa_rag.utils.rag_engine import RAGEngine
from agent.Onto_wa_rag.provider.llm_providers import OpenAIProvider
from agent.Onto_wa_rag.provider.get_key import get_openai_key


async def example_usage():
    """Exemple d'utilisation d'OntoRAG avec tests du syst√®me de contexte"""

    rag = OntoRAG(
        storage_dir=STORAGE_DIR,
        chunk_size=CHUNK_SIZE,
        chunk_overlap=CHUNK_OVERLAP,
        ontology_path=ONTOLOGY_PATH_TTL
    )

    await rag.initialize()

    from files_to_index import DOCUMENTS
    import os

    """
    DOCUMENTS = [
        {"filepath": os.path.join(os.path.dirname(os.path.abspath(__file__)), "test_folder/PSbox.f90"),
         "project_name": "BigDFT", "version": "1.9"},
        # Ajoutez ici d'autres documents si vous le souhaitez
    ]
    """
    # Traitement parall√®le
    results = await rag.add_documents_batch(DOCUMENTS, max_concurrent=MAX_CONCURRENT)
    print(f"Ajout termin√©: {sum(results.values())}/{len(results)} succ√®s")

    # Statistiques
    stats = rag.get_statistics()

    print("\n" + "=" * 100)
    print("üöÄ ONTORAG - SYST√àME DE RECHERCHE DOCUMENTAIRE INTELLIGENT")
    print("=" * 100)

    await show_available_commands()

    while True:
        try:
            query = input('\nüí´ Commande : ').strip()

            if query.lower() in ['/quit', '/exit', 'quit', 'exit', 'q']:
                print("üëã Au revoir !")
                break

            elif query in ['/?', '/help', 'help']:
                await show_available_commands()

            # ==================== RECHERCHE ====================
            elif query.startswith('/search '):
                question = query[8:].strip()
                if question:
                    print(f"üîç Recherche ontologique: {question}")
                    result = await rag.query(question, use_ontology=True)
                    await display_query_result(result)

            elif query.startswith('/hierarchical '):
                # Parser la commande avec options
                parts = query[13:].strip().split()
                if not parts:
                    print("‚ùå Usage: /hierarchical <question> [--mode=auto|text|fortran|unified]")
                    continue

                # Extraire la question et les options
                question_parts = []
                mode = 'auto'

                for part in parts:
                    if part.startswith('--mode='):
                        mode = part.split('=', 1)[1]
                    else:
                        question_parts.append(part)

                question = ' '.join(question_parts)

                if question:
                    # print(f"üîç Recherche hi√©rarchique intelligente: {question} (mode: {mode})")
                    result = await rag.hierarchical_query(question, max_per_level=3, mode=mode)
                    await display_intelligent_hierarchical_result(result)

            elif query.startswith('/find '):
                entity_name = query[6:].strip()
                if entity_name:
                    print(f"üîç Recherche entit√© Fortran: {entity_name}")
                    entities = await rag.search_jupyter_entities(entity_name)
                    await display_fortran_entities(entities)

            # ==================== GESTION DOCUMENTS ====================

            elif query.startswith('/list'):
                docs = rag.list_documents()
                await display_document_list(docs)

            elif query.startswith('/stats'):
                # TODO to update with jupyter entity manager
                detail = query[6:].strip()
                if detail == 'fortran':
                    fortran_stats = await rag.get_fortran_stats()
                    print("üìä Statistiques Fortran:")
                    print(json.dumps(fortran_stats, indent=2))
                if detail == 'jupyter':
                    jupyter_stats = await rag.get_jupyter_stats()
                    print("üìä Statistiques Jupyter:")
                    print(json.dumps(jupyter_stats, indent=2))
                elif detail == 'entity':
                    entity_stats = await rag.get_entity_manager_stats()
                    print("üìä Statistiques EntityManager fortran:")
                    print(json.dumps(entity_stats, indent=2))
                    entity_stats = await rag.get_entity_manager_stats_jupyter()
                    print("üìä Statistiques EntityManager jupyter:")
                    print(json.dumps(entity_stats, indent=2))
                elif detail == 'jupyter':
                    fortran_stats = await rag.get_jupyter_stats()
                    print("üìä Statistiques jupyter:")
                    print(json.dumps(fortran_stats, indent=2))
                else:
                    stats = rag.get_statistics()
                    print("üìä Statistiques g√©n√©rales:")
                    print(json.dumps(stats, indent=2))

            # ==================== OUTILS & DIAGNOSTIC ====================
            elif query.startswith('/diagnostic'):
                component = query[11:].strip()
                if component == 'fortran' or not component:
                    diagnosis = await rag.diagnose_fortran_entity_manager()
                    print("üîç Diagnostic EntityManager:")
                    print(json.dumps(diagnosis, indent=2))

            elif query.startswith('/visualization'):
                print('üé® G√©n√©ration visualisation d√©pendances...')
                html_file = await rag.generate_dependency_visualization(
                    output_file="dependencies.html",
                    max_entities=2000,
                    include_variables=False
                )
                if html_file:
                    print(f"‚úÖ G√©n√©r√©: {html_file}")
                    import webbrowser
                    import os
                    webbrowser.open('file://' + os.path.abspath(html_file))

            elif query.startswith('/consult_entity'):
                entity = query[15:].strip()
                # Si aucun document n'est charg√©, l'explorateur sera vide.
                if not rag.custom_processor.fortran_processor.entity_manager.entities:
                    print("\nEntityManager est vide. Ajoutez des documents pour l'utiliser.")
                    return

                explorer = FortranEntityExplorer(rag.custom_processor.fortran_processor.entity_manager,
                                                 rag.ontology_manager)

                report = await explorer.get_full_report(entity)
                # 4. Afficher le rapport de mani√®re lisible
                if "error" in report:
                    print(f"\n--- ERREUR ---")
                    print(report["error"])
                else:
                    print(f"\n--- RAPPORT COMPLET POUR : {report['entity_name']} ---")

                    print("\n[ R√©sum√© ]")
                    for key, value in report['summary'].items():
                        print(f"  - {key.replace('_', ' ').capitalize()}: {value}")

                    print("\n[ Relations Sortantes (ce que cette entit√© utilise) ]")
                    for key, value in report['outgoing_relations'].items():
                        print(f"  - {key.replace('_', ' ').capitalize()}:")
                        if value:
                            for item in value:
                                print(f"    - {item}")
                        else:
                            print("    - (Aucun)")

                    print("\n[ Relations Entrantes (qui utilise cette entit√©) ]")
                    if report['incoming_relations']:
                        for caller in report['incoming_relations']:
                            print(f"  - {caller['name']} (type: {caller['type']}, file: {caller.get('file', 'N/A')})")
                    else:
                        print("  - (Appel√©e par personne)")

                    print("\n[ Contexte Global (o√π se situe cette entit√©) ]")
                    parent = report['global_context']['parent_entity']
                    if isinstance(parent, dict):
                        print(f"  - Parent: {parent['name']} (type: {parent['type']})")
                    else:
                        print(f"  - Parent: {parent}")

                    print("\n[ Contexte Local (ce que contient cette entit√©) ]")
                    children = report['local_context']['children_entities']
                    if children:
                        print("  - Entit√©s enfants:")
                        for child in children:
                            print(f"    - {child['name']} (type: {child['type']})")
                    else:
                        print("  - Pas d'entit√©s enfants.")

                    print("\n[ Concepts associ√©s √† cette entit√© ]")
                    concepts = report['detected_concepts']
                    if concepts:
                        for concept in concepts:
                            print(f"  - {concept['label']} (confiance: {concept['confidence']})")

                    print("\n--- Code Source ---")
                    print(report['local_context']['source_code'])
                    print("--- FIN DU RAPPORT ---")

                if not rag.custom_processor.jupyter_processor.entity_manager.entities:
                    print("\nEntityManager est vide. Ajoutez des documents pour l'utiliser.")
                    return

                explorer = JupyterEntityExplorer(rag.custom_processor.jupyter_processor.entity_manager,
                                                 rag.ontology_manager)

                report = await explorer.get_full_report(entity)
                if "error" in report:
                    print(f"\n--- ERREUR ---")
                    print(report["error"])
                else:
                    print(f"\n--- RAPPORT COMPLET JUPYTER POUR : {report['entity_name']} ---")

                    print("\n[ R√©sum√© ]")
                    for key, value in report['summary'].items():
                        print(f"  - {key.replace('_', ' ').capitalize()}: {value}")

                    # Affichage sp√©cifique au notebook si disponible
                    if report.get('notebook_summary'):
                        print(f"\n[ R√©sum√© du Notebook ]")
                        print(f"  {report['notebook_summary']}")

                    if report.get('entity_role') != 'default':
                        print(f"\n[ R√¥le de l'Entit√© ]")
                        print(f"  - {report['entity_role']}")

                    print("\n[ Relations Sortantes (ce que cette entit√© utilise) ]")
                    outgoing = report['outgoing_relations']

                    # Affichage des imports
                    if 'imports' in outgoing:
                        print("  - Imports:")
                        if outgoing['imports']:
                            for imp in outgoing['imports']:
                                if isinstance(imp, dict):
                                    line_info = f" (ligne {imp['line']})" if imp.get('line', 0) > 0 else ""
                                    print(f"    - {imp['name']}{line_info}")
                                else:
                                    print(f"    - {imp}")
                        else:
                            print("    - (Aucun)")

                    # Affichage des appels de fonction
                    if 'function_calls' in outgoing:
                        print("  - Appels de fonction:")
                        if outgoing['function_calls']:
                            for call in outgoing['function_calls']:
                                if isinstance(call, dict):
                                    line_info = f" (ligne {call['line']})" if call.get('line', 0) > 0 else ""
                                    print(f"    - {call['name']}{line_info}")
                                else:
                                    print(f"    - {call}")
                        else:
                            print("    - (Aucun)")

                    print("\n[ Relations Entrantes (qui r√©f√©rence cette entit√©) ]")
                    if report['incoming_relations']:
                        for ref in report['incoming_relations']:
                            cell_type = ref.get('cell_type', ref.get('type', 'unknown'))
                            parent_info = f", parent: {ref['parent']}" if ref.get('parent') != 'N/A' else ""
                            print(
                                f"  - {ref['name']} (type: {cell_type}, notebook: {ref.get('file', 'N/A')}{parent_info})")
                    else:
                        print("  - (R√©f√©renc√©e par personne)")

                    print("\n[ Contexte Global (o√π se situe cette entit√©) ]")
                    parent = report['global_context']['parent_entity']
                    if isinstance(parent, dict):
                        role_info = f", r√¥le: {parent['role']}" if parent.get('role') != 'default' else ""
                        print(f"  - Parent: {parent['name']} (type: {parent['type']}{role_info})")
                    else:
                        print(f"  - Parent: {parent}")

                    # Contexte notebook si disponible
                    notebook_ctx = report['global_context'].get('notebook_context', {})
                    if notebook_ctx:
                        print(f"  - Notebook: {notebook_ctx.get('notebook_name', 'N/A')}")
                        if notebook_ctx.get('notebook_summary'):
                            print(f"  - R√©sum√© notebook: {notebook_ctx['notebook_summary'][:100]}...")

                    print("\n[ Contexte Local (ce que contient cette entit√©) ]")
                    children = report['local_context']['children_entities']
                    if children:
                        print("  - Entit√©s enfants:")
                        for child in children:
                            role_info = f", r√¥le: {child['role']}" if child.get('role') != 'default' else ""
                            print(f"    - {child['name']} (type: {child['type']}{role_info})")
                    else:
                        print("  - Pas d'entit√©s enfants.")

                    # Informations sp√©cifiques au notebook
                    notebook_info = report['local_context'].get('notebook_info', {})
                    if notebook_info:
                        print("  - Informations notebook:")
                        for key, value in notebook_info.items():
                            if key != 'notebook_summary' or len(str(value)) < 200:  # √âviter de r√©p√©ter un long r√©sum√©
                                print(f"    - {key.replace('_', ' ').capitalize()}: {value}")

                    print("\n[ Concepts associ√©s √† cette entit√© ]")
                    concepts = report['detected_concepts']
                    if concepts:
                        for concept in concepts:
                            if isinstance(concept, dict):
                                confidence = concept.get('confidence', 0)
                                print(f"  - {concept.get('label', 'N/A')} (confiance: {confidence:.2f})")
                            else:
                                print(f"  - {concept}")
                    else:
                        print("  - (Aucun concept d√©tect√©)")

                    print("\n--- Code Source ---")
                    source_code = report['local_context']['source_code']
                    if len(source_code) > 2000:
                        print(source_code[:2000] + "\n... (tronqu√©, source trop longue)")
                    else:
                        print(source_code)
                    print("--- FIN DU RAPPORT JUPYTER ---")

            elif query.startswith('/refresh'):
                scope = query[8:].strip()
                if scope == 'fortran' or not scope:
                    print("üîÑ R√©indexation Fortran...")
                    await rag.refresh_fortran_index()
                    print("üîÑ R√©indexation jupyter...")
                    await rag.refresh_jupyter_index()
                    print("‚úÖ R√©indexation termin√©e")

            elif query.startswith('/agent '):
                # R√©cup√©rer la requ√™te initiale de l'utilisateur
                current_input = query[7:].strip()

                if current_input:
                    # D√©marrer une boucle de conversation qui continue tant que l'agent a besoin de clarifications.
                    while True:
                        print("üß† L'agent r√©fl√©chit...")

                        # Appeler l'agent avec l'entr√©e actuelle.
                        # use_memory=True est CRUCIAL ici pour que l'agent se souvienne du contexte
                        # de sa propre question.
                        agent_response = await rag.unified_agent.run(current_input, use_memory=True)

                        # V√©rifier si la r√©ponse de l'agent est une demande de clarification
                        if agent_response.status == "clarification_needed":
                            # 1. Utiliser la propri√©t√© clarification_question
                            question_from_agent = agent_response.clarification_question

                            # 2. Afficher la question √† l'utilisateur de mani√®re claire
                            print(f"\n‚ùì L'agent a besoin d'une clarification pour continuer :")
                            print(f"   '{question_from_agent}'")

                            # 3. Demander une r√©ponse √† l'utilisateur via la console
                            user_clarification = input("\nVotre r√©ponse > ")

                            # 4. La r√©ponse de l'utilisateur devient la prochaine entr√©e pour l'agent
                            current_input = user_clarification

                            # La boucle `while` va maintenant se relancer avec cette nouvelle entr√©e.

                        elif agent_response.status == "success":
                            # Si la r√©ponse est un succ√®s, afficher la r√©ponse finale
                            print("\n--- R√âPONSE FINALE DE L'AGENT ---")
                            print(agent_response.to_human_readable())

                            # Optionnel : Afficher des m√©tadonn√©es utiles
                            print(f"\nüìä M√©tadonn√©es :")
                            print(f"   ‚è±Ô∏è  Temps d'ex√©cution: {agent_response.execution_time_total_ms:.0f}ms")
                            print(f"   üî¢ √âtapes utilis√©es: {agent_response.steps_taken}/{agent_response.max_steps}")
                            print(f"   üìö Sources consult√©es: {len(agent_response.sources_consulted)}")
                            print(f"   üéØ Niveau de confiance: {agent_response.confidence_level:.2f}")

                            # Optionnel : Proposer des questions de suivi
                            if agent_response.suggested_followup_queries:
                                print(f"\nüí° Questions de suivi sugg√©r√©es :")
                                for i, suggestion in enumerate(agent_response.suggested_followup_queries[:3], 1):
                                    print(f"   {i}. {suggestion}")

                            # Sortir de la boucle de conversation
                            break

                        elif agent_response.status == "timeout":
                            print("\n‚è∞ L'agent a atteint la limite de temps")
                            print("--- R√âPONSE PARTIELLE ---")
                            print(agent_response.to_human_readable())

                            # Proposer de continuer ou d'arr√™ter
                            continue_choice = input("\nVoulez-vous essayer une approche diff√©rente ? (o/n) > ")
                            if continue_choice.lower() == 'n':
                                break
                            else:
                                current_input = input("Reformulez votre question > ")

                        elif agent_response.status == "error":
                            print(f"\n‚ùå Erreur de l'agent : {agent_response.error_details}")

                            # Proposer de r√©essayer
                            retry_choice = input("Voulez-vous r√©essayer ? (o/n) > ")
                            if retry_choice.lower() == 'n':
                                break
                            else:
                                current_input = input("Reformulez votre question > ")

                        else:
                            print(f"\n‚ö†Ô∏è Statut inattendu : {agent_response.status}")
                            break

            elif query.startswith("/agent_memory"):
                print("\n--- M√©moire de l'agent ---")
                print("\n" + rag.unified_agent.get_memory_summary())

            elif query.startswith("/agent_clear"):
                rag.unified_agent.clear_memory()
                print("üß† M√©moire de l'agent effac√©e.")

            # ==================== REQU√äTE NATURELLE ====================
            elif not query.startswith('/'):
                # Requ√™te naturelle - utiliser query() standard
                print(f"üí≠ Requ√™te naturelle: {query}")
                await rag.ask(query)

            else:
                print("‚ùå Commande inconnue. Tapez '/help' pour l'aide")

        except KeyboardInterrupt:
            print("\nüëã Au revoir !")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")


async def show_available_commands():
    """Affiche toutes les commandes disponibles utilisant les m√©thodes existantes"""
    print(f"""
üîç RECHERCHE
   <question>                   Requ√™te naturelle directe
   /find <entit√©>               Recherche entit√©s Fortran (m√©thode: search_fortran_entities)
   /consult_entity              Donn√©es brut sur une entit√© fortran (rapport)
   /agent <question>            Deploit un agent de questionnement (utilise pour les grands r√©sum√©s et suivre une discussion)
   /agent_clear                 Efface la m√©moire de l'agent

üìä R√âSUM√âS & STATISTIQUES
   /stats [detail]              Statistiques (get_statistics/get_fortran_stats)
   /stats entity                Stats EntityManager

üìÅ GESTION DOCUMENTS
   /list                        Lister documents (list_documents)

üîß OUTILS & DIAGNOSTIC
   /diagnostic                  Diagnostic syst√®me (diagnose_fortran_entity_manager)
   /visualization               Graphique d√©pendances (generate_dependency_visualization)
   /refresh                     R√©indexer (refresh_fortran_index)

‚ùì AIDE
   /help                        Cette aide
   /quit                        Quitter

""")


async def display_query_result(result: Dict[str, Any]):
    """Affiche le r√©sultat d'une query() standard"""
    print(f"\nü§ñ R√©ponse: {result.get('answer', 'Pas de r√©ponse')}")

    sources = result.get('sources', [])
    if sources:
        print(f"\nüìö Sources ({len(sources)}):")
        for source in sources:
            print(f"\n  üìÑ {source['filename']} (lignes {source['start_line']}-{source['end_line']})")
            print(f"     Type: {source['entity_type']} - Nom: {source['entity_name']}")
            if source.get('detected_concepts'):
                print(f"     Concepts: {', '.join(source['detected_concepts'])}")
            print(f"     Score: {source['relevance_score']}")


async def display_intelligent_hierarchical_result(result: Dict[str, Any]):
    """Affiche les r√©sultats de la recherche hi√©rarchique intelligente"""

    print(f"\nü§ñ R√©ponse: {result.get('answer', 'Pas de r√©ponse')}")

    search_mode = result.get('search_mode', 'unknown')
    #print(f"\nüéØ Mode de recherche utilis√©: {search_mode}")

    hierarchical_results = result.get('hierarchical_results', {})
    if hierarchical_results:
        print(f"\nüìä R√©sultats par niveau conceptuel:")

        for conceptual_level, level_data in hierarchical_results.items():
            display_name = level_data.get('display_name', conceptual_level)
            results = level_data.get('results', [])

            print(f"\nüìö {display_name} ({len(results)} r√©sultats):")

            for i, res in enumerate(results[:3]):  # Top 3 par niveau
                if 'entity' in res:
                    # R√©sultat Fortran
                    entity = res['entity']
                    print(f"  {i + 1}. üîß {entity.entity_name} ({entity.entity_type}) "
                          f"in {entity.filename} (sim: {res['similarity']:.2f})")
                else:
                    # R√©sultat texte
                    source_info = res.get('source_info', {})
                    title = source_info.get('section_title', 'Sans titre')
                    content_type = source_info.get('content_type', 'unknown')
                    icon = "üîß" if content_type == 'fortran' else "üìÑ"
                    print(f"  {i + 1}. {icon} {title} "
                          f"in {source_info.get('filename', 'Unknown')} (sim: {res['similarity']:.2f})")

    total_passages = result.get('total_passages', 0)
    conceptual_levels = result.get('conceptual_levels_found', [])

    print(f"\nüìä R√©sum√©: {total_passages} passages trouv√©s sur {len(conceptual_levels)} niveaux conceptuels")


async def display_fortran_entities(entities: List[Dict[str, Any]]):
    """Affiche les entit√©s Fortran trouv√©es"""
    if entities:
        print(f"üîç {len(entities)} entit√©s Fortran trouv√©es:")
        for i, entity in enumerate(entities[:10], 1):
            confidence_icon = "üü¢" if entity.get('confidence', 0) > 0.8 else "üü°" if entity.get('confidence',
                                                                                              0) > 0.5 else "üî¥"
            print(f"  {i}. {confidence_icon} {entity['name']} ({entity['type']}) in {Path(entity['file']).name}")
            print(f"     Confidence: {entity.get('confidence', 0):.2f}, Match: {entity.get('match_type', 'unknown')}")
    else:
        print("‚ùå Aucune entit√© Fortran trouv√©e")


async def display_document_list(docs: List[Dict[str, Any]]):
    """Affiche la liste des documents"""
    if not docs:
        print("üìÅ Aucun document charg√©")
        return

    print(f"üìÅ {len(docs)} documents charg√©s:")

    by_project = {}
    for doc in docs:
        project = doc.get('project', 'Unknown')
        if project not in by_project:
            by_project[project] = []
        by_project[project].append(doc)

    for project, project_docs in by_project.items():
        print(f"\n  üìÇ Projet: {project} ({len(project_docs)} docs)")
        for doc in project_docs:  # Top 5 par projet
            file_type = doc.get('file_type', 'unknown')
            chunks = doc.get('total_chunks', 0)
            print(f"    ‚Ä¢ {doc.get('filename', 'Unknown')} ({file_type}, {chunks} chunks)")


if __name__ == "__main__":

    asyncio.run(example_usage())
